{"ast":null,"code":"var _jsxFileName = \"/Users/yardentsaraf/Desktop/EpicureApp/src/components/pages/restaurantPage/RestaurantPage.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useParams } from \"react-router-dom\";\nimport Footer from \"../../footer/Footer\";\nimport Header from \"../../header/Header\";\nimport \"./RestaurantPage.scss\";\nimport { Fragment, useState, useEffect } from \"react\";\nimport DishPage from \"../DishPage\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst RestaurantPage = () => {\n  _s();\n\n  const [openDishCard, setOpenDishCard] = useState(false);\n  const [dishName, setDishName] = useState(\"\");\n  const [dataResRestaurants, setDataResRestaurants] = useState([]);\n\n  const fetchRestaurantsData = async () => {\n    try {\n      const responseRestaurant = await axios.get(\"http://localhost:8080/restaurants\");\n      setDataResRestaurants(responseRestaurant.data.result);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  useEffect(() => {\n    fetchRestaurantsData();\n  }, []);\n\n  const openDishCardHandler = dish => {\n    setOpenDishCard(true);\n    setDishName(dish);\n  };\n\n  console.log(dataResRestaurants);\n  const params = useParams();\n  const restaurantDetails = dataResRestaurants.map(item => item === params.restaurantName);\n  const mealsTypes = [\"Breakfast\", \"Lunch\", \"Dinner\"];\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), openDishCard && /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"dish-container\",\n        onClick: () => setOpenDishCard(false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 35\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"close-dish-page\",\n        onClick: () => setOpenDishCard(false),\n        children: \"X\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 118\n      }, this), \" \", /*#__PURE__*/_jsxDEV(DishPage, {\n        dish: dishName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 202\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 25\n    }, this), !openDishCard && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"restaurant-page-container\",\n      children: /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 27\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n\n_s(RestaurantPage, \"nGFc8+74NLuxUGd/+RPExpyKajY=\", false, function () {\n  return [useParams];\n});\n\n_c = RestaurantPage;\nexport default RestaurantPage;\n\nconst ChefPage = () => {\n  _s2();\n\n  const dispatch = useAppDispatch();\n  const {\n    chefs\n  } = useSelector(state => state.chefs);\n  const {\n    restaurants\n  } = useSelector(state => state.restaurants);\n  useEffect(() => {\n    dispatch(fetchChefs());\n    dispatch(fetchRestaurants());\n  }, []);\n  const params = useParams();\n  const chefDetails = chefs.filter(chef => chef.chefName === params.chefName);\n  const chefRestaurants = restaurants.filter(restaurant => restaurant.chef === params.chefName);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: params.chefName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: chefDetails[0].chefImage,\n      alt: \"chef\",\n      className: \"chef-img\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"chef-description\",\n      children: chefDetails[0].chefDescription\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chef-restaurants-container\",\n      children: chefRestaurants.map(restaurant => {\n        return /*#__PURE__*/_jsxDEV(Link, {\n          to: `/RestaurantPage/${restaurant.restaurantName}`,\n          className: \"to-restaurant-btn\",\n          children: /*#__PURE__*/_jsxDEV(ChefCard, {\n            title: restaurant.name,\n            detail: \"\",\n            restaurantImg: restaurant.mobileImage,\n            restaurantName: restaurant.name,\n            img: \"\"\n          }, restaurant.name, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(ChefPage, \"LGOe4uNE1iBMM3ELugZ8rj8svP4=\", true, function () {\n  return [useParams];\n});\n\n_c2 = ChefPage;\nexport default ChefPage;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"RestaurantPage\");\n$RefreshReg$(_c2, \"ChefPage\");","map":{"version":3,"sources":["/Users/yardentsaraf/Desktop/EpicureApp/src/components/pages/restaurantPage/RestaurantPage.tsx"],"names":["useParams","Footer","Header","Fragment","useState","useEffect","DishPage","axios","RestaurantPage","openDishCard","setOpenDishCard","dishName","setDishName","dataResRestaurants","setDataResRestaurants","fetchRestaurantsData","responseRestaurant","get","data","result","err","console","log","openDishCardHandler","dish","params","restaurantDetails","map","item","restaurantName","mealsTypes","ChefPage","dispatch","useAppDispatch","chefs","useSelector","state","restaurants","fetchChefs","fetchRestaurants","chefDetails","filter","chef","chefName","chefRestaurants","restaurant","chefImage","chefDescription","name","mobileImage"],"mappings":"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","sourcesContent":["import { useParams } from \"react-router-dom\";\nimport Footer from \"../../footer/Footer\";\nimport Header from \"../../header/Header\";\nimport clock from \"../../../assets/clock-icon.svg\";\nimport NavLinkTemplate from \"../../layout/button/NavLinkTemplate\";\nimport DishSmallCard from \"../../layout/card/DishSmallCard\";\nimport \"./RestaurantPage.scss\";\nimport { Fragment, useState, useEffect } from \"react\";\nimport DishPage from \"../DishPage\";\nimport axios from \"axios\";\n\nconst RestaurantPage = () => {\n  const [openDishCard, setOpenDishCard] = useState(false);\n  const [dishName, setDishName] = useState(\"\");\n  const [dataResRestaurants, setDataResRestaurants] = useState([]);\n\n  const fetchRestaurantsData = async () => {\n    try {\n      const responseRestaurant = await axios.get(\n        \"http://localhost:8080/restaurants\"\n      );\n      setDataResRestaurants(responseRestaurant.data.result);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n  useEffect(() => {\n    fetchRestaurantsData();\n  }, []);\n\n\n  const openDishCardHandler = (dish: string) => {\n    setOpenDishCard(true);\n    setDishName(dish);\n  };\n\n  console.log(dataResRestaurants)\n  const params: any = useParams();\n  const restaurantDetails = dataResRestaurants.map(\n    (item) => item === params.restaurantName\n  );\n  const mealsTypes: string[] = [\"Breakfast\", \"Lunch\", \"Dinner\"];\n  return (\n    <Fragment>\n      <Header />\n      {openDishCard && (<Fragment><button className=\"dish-container\" onClick={()=> setOpenDishCard(false)}></button> <button className=\"close-dish-page\" onClick={()=>setOpenDishCard(false)}>X</button> <DishPage dish={dishName}></DishPage></Fragment>)} \n       {!openDishCard && (<div className=\"restaurant-page-container\">\n          {/* <img\n            src={restaurantDetails[0].desktopImage}\n            alt=\"restaurant\"\n            className=\"restaurant-page-img\"\n            srcSet={`${restaurantDetails[0].bigImage} 800w`}\n          ></img>\n          <h1>{params.restaurantName}</h1>\n          <h2>{restaurantDetails[0].chefName}</h2>\n          <img src={clock} alt=\"clock\"></img> <span>Open now</span>\n          <nav className=\"categories-div\">\n            {mealsTypes.map((type) => (\n              <NavLinkTemplate content={type} to={`/${type}`} />\n            ))}\n          </nav>\n          <div className=\"restaurants-container\">\n            {restaurantDetails.map((item) => {\n              return (\n                <button\n                  className=\"to-dish-btn\"\n                  onClick={() => openDishCardHandler(item.signatureName)}\n                >\n                  <div className=\"restaurant-item\">\n                    <DishSmallCard\n                      img={item.signatureImage}\n                      signatureDesktopImage={item.signatureDesktopImage}\n                      title={item.signatureName}\n                      detail={item.signatureDescription}\n                      price={item.price}\n                      key={item.key}\n                    ></DishSmallCard>\n                  </div>\n                </button>\n              );\n            })}\n          </div> */}\n          <Footer />\n        </div>)}\n    </Fragment>\n );\n};\n\nexport default RestaurantPage;\n\n\n\n\n\nconst ChefPage = () => {\n  const dispatch = useAppDispatch();\n  const { chefs } = useSelector((state: any) => state.chefs);\n  const { restaurants } = useSelector((state: any) => state.restaurants);\n\n  useEffect(() => {\n    dispatch(fetchChefs());\n    dispatch(fetchRestaurants());\n  }, []);\n\n  const params: any = useParams();\n  const chefDetails = chefs.filter(\n    (chef: any) => chef.chefName === params.chefName\n  );\n  const chefRestaurants = restaurants.filter(\n    (restaurant: any) => restaurant.chef === params.chefName\n  );\n  return (\n    <Fragment>\n      <Header />\n      <h1>{params.chefName}</h1>\n      <img src={chefDetails[0].chefImage} alt=\"chef\" className=\"chef-img\" />\n      <p className=\"chef-description\">{chefDetails[0].chefDescription}</p>\n      <div className=\"chef-restaurants-container\">\n        {chefRestaurants.map((restaurant: any) => {\n          return (\n            <Link\n              to={`/RestaurantPage/${restaurant.restaurantName}`}\n              className=\"to-restaurant-btn\"\n            >\n              <ChefCard\n                key={restaurant.name}\n                title={restaurant.name}\n                detail=\"\"\n                restaurantImg={restaurant.mobileImage}\n                restaurantName={restaurant.name}\n                img=\"\"\n              />\n            </Link>\n          );\n        })}\n      </div>\n      <Footer />\n    </Fragment>\n  );\n};\n\nexport default ChefPage;\n"]},"metadata":{},"sourceType":"module"}